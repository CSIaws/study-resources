worker_processes  1;
error_log logs/error.log info;
events {
  worker_connections 1024;
}
http {
    server {
        listen       80;
        server_name  cj1.chensiyi.link;
        location / {
                default_type text/html;
                content_by_lua_block {
                    ngx.say("<p>hello, cj1</p>")
                }
            }
        location /public {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello, world</p>")
            }
        }


        location /private {
          set $session_storage redis;
          set $session_redis_prefix sessions;
          set $session_redis_host 127.0.0.1;
          set $session_redis_port 6379;
          echo "befor lua";
          access_by_lua_block {
              local opts = {
              client_id = "frontend",
              client_secret = "12bdc6b9-d169-4aa8-8dcf-c7e579486b59",
              redirect_uri = "http://jiabin2.chensiyi.link/",
              issuer = "http://kc-back.chensiyi.link:8080/auth/realms/test",
              authorization_endpoint = "http://kc-back.chensiyi.link:8080/auth/realms/test/protocol/openid-connect/auth",
              token_endpoint = "http://kc-back.chensiyi.link:8080/auth/realms/test/protocol/openid-connect/token",
              jwks_uri = "http://kc-back.chensiyi.link:8080/auth/realms/test/protocol/openid-connect/certs",
              end_session_endpoint = "http://kc-back.chensiyi.link:8080/auth/realms/test/protocol/openid-connect/logout",
              target_url = "/top",
              }

              local res, err, target, session = require("lua/openidc").authenticate(opts)
              session:close()

              if err then
              ngx.log(ngx.ERR, err)
              ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
              end

              #ngx.req.set_header("authentication", "Bearer "..res.access_token)
          }

          proxy_http_version 1.1;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto "https";
          proxy_pass https://echo-api.3scale.net;
        }
    }

    server {
        listen       80;
        server_name  cj2.chensiyi.link;
        location / {
                default_type text/html;
                content_by_lua_block {
                    ngx.say("<p>hello, cj2</p>")
                }
            }

        location /public {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello, world</p>")
            }
        }


        location /private {
          set $session_storage redis;
          set $session_redis_prefix sessions;
          set $session_redis_host 127.0.0.1;
          set $session_redis_port 6379;
          echo "befor lua";
          access_by_lua_block {
              local opts = {
              client_id = "frontend",
              client_secret = "12bdc6b9-d169-4aa8-8dcf-c7e579486b59",
              redirect_uri = "http://jiabin2.chensiyi.link/",
              issuer = "http://kc-back.chensiyi.link:8080/auth/realms/test",
              authorization_endpoint = "http://kc-back.chensiyi.link:8080/auth/realms/test/protocol/openid-connect/auth",
              token_endpoint = "http://kc-back.chensiyi.link:8080/auth/realms/test/protocol/openid-connect/token",
              jwks_uri = "http://kc-back.chensiyi.link:8080/auth/realms/test/protocol/openid-connect/certs",
              end_session_endpoint = "http://kc-back.chensiyi.link:8080/auth/realms/test/protocol/openid-connect/logout",
              target_url = "/top",
              }

              local res, err, target, session = require("lua/openidc").authenticate(opts)
              session:close()

              if err then
              ngx.log(ngx.ERR, err)
              ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
              end

              #ngx.req.set_header("authentication", "Bearer "..res.access_token)
          }

          proxy_http_version 1.1;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto "https";
          proxy_pass https://echo-api.3scale.net;
        }
    }
}
